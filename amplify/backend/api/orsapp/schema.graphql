type SportsmanshipPoint @model @auth(rules: [{allow: public}]) {
  id: ID!
  points: Int
}

type SoccerTeamStat {
  id: ID
  teamid: String
  division: String
  roster: [String]
  goals: Int
  assists: Int
  yellow_cards: Int
  red_cards: Int
  games_played: Int
  captains: [String]
}

type SoccerDivisionStat {
  id: ID
  teamid: String
  division: String
  position: String
  goals: Int
  assists: Int
  yellow_cards: Int
  red_cards: Int
  games_played: Int
}

type Player @model @auth(rules: [{allow: public}]) {
  id: ID!
  user_id: String
  soccer_stats: [SoccerDivisionStat]
  teamID: ID! @index(name: "byTeam")
  role: String
}

enum GameStatusEnum {
  NOT_STARTED
  STARTED
  CANCELLED
  SUBMITTED
  FINISHED
}

type Game @model @auth(rules: [{allow: public}]) {
  id: ID!
  division: ID! @index(name: "byDivision")
  date: AWSDateTime
  location: String
  status: GameStatusEnum
  home_roster: [AWSJSON]
  away_roster: [AWSJSON]
  home_score: Int
  away_score: Int
  goals: [AWSJSON]
  round: Int
  referees: [String]
  HomeTeam: Team! @hasOne
  AwayTeam: Team! @hasOne
}

type Division @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String
  abbreviation: String
  teams: [String]
  season: ID! @index(name: "bySeason")
  Games: [Game] @hasMany(indexName: "byDivision", fields: ["id"])
  level: DivisionsEnum
  description: String
  is_playoff: Boolean
  Teams: [Team] @manyToMany(relationName: "TeamDivision")
}

type Season @model @auth(rules: [{allow: public}]) {
  id: ID!
  league: ID! @index(name: "byLeague")
  name: String
  abbreviation: String
  start_date: AWSDate
  end_date: AWSDate
  Divisions: [Division] @hasMany(indexName: "bySeason", fields: ["id"])
  is_completed: Boolean
}

type League @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String
  sport: String
  date_founded: AWSDateTime
  cost_per_individual: Float
  cost_per_team: Float
  coordinators: [String]
  Seasons: [Season] @hasMany(indexName: "byLeague", fields: ["id"])
  description: String
  number_of_periods: Int
  time_per_period: Int
}

type TeamNote @model @auth(rules: [{allow: public}]) {
  id: ID!
  date: AWSDateTime
  description: String
  team_id: ID! @index(name: "byTeam")
  author_id: String
}

enum DivisionsEnum {
  D
  C
  B
  A
  AA
  AAA
}

type Team @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String
  founded: AWSDateTime
  home_colour: String
  away_colour: String
  TeamNotes: [TeamNote] @hasMany(indexName: "byTeam", fields: ["id"])
  team_history: [SoccerTeamStat]
  team_picture: String
  Divisions: [Division] @manyToMany(relationName: "TeamDivision")
  Players: [Player] @hasMany(indexName: "byTeam", fields: ["id"])
  captains: [String]
}

type PlayerNote @model @auth(rules: [{allow: public}]) {
  id: ID!
  player_id: String
  date: AWSDateTime
  description: String
  author_id: String
}
 