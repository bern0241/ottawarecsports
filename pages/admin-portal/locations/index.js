/**
 * Last updated: 2023-04-04
 *
 * Author(s):
 * Justin Bernard <bern0241@algonquinlive.com>
 * Verity Stevens <stev0298@algonquinlive.com>
 */

 import React, { useState, useEffect } from 'react';
 import Head from 'next/head';
 import { IconCirclePlus } from '@tabler/icons-react';
 import { IconEdit } from '@tabler/icons-react';
 import { IconTrash } from '@tabler/icons-react';
 import AWS from 'aws-sdk';
 import { API } from 'aws-amplify';
 import { useUser } from '@/context/userContext';
 import Link from 'next/link';
 //Components
 import SuccessMessage from '@/components/common/SuccessMessage';
 import ACPUserRow from '@/components/admin-portal/users/ACPUserRow'; 
 import ACPNewUserModal from '@/components/admin-portal/users/ACPNewUserModal';
 import ACPSearchUserBar from '@/components/admin-portal/users/ACPSearchUserBar';
 import NewLocation from '@/components/admin-portal/locations/NewLocation';
 import EditLocation from '@/components/admin-portal/locations/EditLocation';
 import DeleteLocation from '@/components/admin-portal/locations/DeleteLocation';
 import { listLocations } from '@/src/graphql/queries';
 
 export default function LocationsPage() {
    const [user, setUser, authRoles, setAuthRoles] = useUser();
    const [locations, setLocations] = useState([]);
    const [editLocation, setEditLocation] = useState({});
    //Modals
    const [editLocationModal, setEditLocationModal] = useState(false);
    const [deleteLocationModal, setDeleteLocationModal] = useState(false);

     useEffect(() => {
        fetchLocations();
     }, []);

     async function fetchLocations() {
        const locationsFetch = await API.graphql({ 
            query: listLocations 
        });
        setLocations(locationsFetch.data.listLocations.items);
      }
      
      const editLocationClicked = (e, location) => {
        e.preventDefault();
        setEditLocationModal(true);
        setEditLocation(location);
      }
      
      const deleteLocationClicked = (e, location) => {
        e.preventDefault();
        setDeleteLocationModal(true);
        setEditLocation(location);
      }
    
 
     if (!user || (!authRoles.includes('Admin') && !authRoles.includes('Owner'))) {
         return (
             <div className="flex items-center justify-center h-[50vh]">
                 <h2>You do not have access for this page</h2>
             </div>
         );
     }
 
     return (
         <>
              <Head>
                 <title>Ottawa Rec Sports - Locations</title>
                 <meta name="description" content="Generated by create next app" />
                 <meta name="viewport" content="width=device-width, initial-scale=1" />
                 <link rel="icon" href="/images/ORS-Logo.png" />
             </Head>
 
             <main className="p-4 w-full">
                <div className='flex justify-end mx-auto max-w-[50em] relative top-0'>
                    <NewLocation locations={locations} setLocations={setLocations} />
                </div>
                            {locations && locations.map((location, index) => (
                                <>
                                    <div key={index} className='flex flex-col justify-center text-center p-3 max-w-[50em] my-2 mx-auto bg-white border border-black shadow-md'>
                                        <IconEdit onClick={(e) => editLocationClicked(e, location)} style={{position: 'absolute', fontSize: '20px', cursor: 'pointer', transform: 'translate(-0px, -15px)'}} name="create-outline"></IconEdit>
                                        <IconTrash onClick={(e) => { deleteLocationClicked(e, location)}} style={{position: 'absolute', fontSize: '20px', cursor: 'pointer', transform: 'translate(25px, -15px)', color: 'red'}} name="trash-outline"></IconTrash>
                                        <div>
                                        <p className='text-lg'>{location.name}</p>
                                        <Link style={{fontSize: '0.9rem', color: 'blue', textDecoration: 'underline'}} href={location.weblink}>{location.weblink}</Link>
                                    </div>
                                </div>
                                </>
                            ))}
                            {locations.length === 0 && (
                                <div className='text-black mx-auto flex justify-center items-center h-10'>
                                    No locations exist.
                                </div>
                            )}
             </main>
             {/* Add User modal */}
             {editLocationModal && (
                <EditLocation openModal={editLocationModal} setOpenModal={setEditLocationModal} 
                location={editLocation} fetchLocations={fetchLocations} />
            )}
            {deleteLocationModal && (
                <DeleteLocation location={editLocation} setOpenModal={setDeleteLocationModal} fetchLocations={fetchLocations} />
            )}
         </>
     );
 }
 